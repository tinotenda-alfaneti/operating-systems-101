This group assignment aims to implement a basic memory management system using paging in C. 

Objectives:

Understand the concepts of address spaces, address translation, and paging.
Implement a memory management system that uses paging techniques in C.
Simulate processes accessing memory and observe the paging behavior.
Analyze and optimize the implemented system for memory efficiency.
Design:

Define the size of virtual and physical memory spaces.
Choose a page size and calculate the number of pages and frames.
Implement data structures to represent the page table and physical memory frames.
Define functions to perform:
Address translation from virtual to physical addresses.
Page allocation and deallocation (simulating memory requests).
Handling page faults (simulating missing pages in memory).
Tracking free and allocated frames
Implementation:

Write C code to implement the designed memory management system.
Use functions like malloc and free for memory allocation in the main program.
Simulate processes accessing memory by generating random memory addresses.
Implement the address translation functionality using the page table.
Track and display statistics like memory utilization, page faults, and hit rate.
Analysis and Optimization:

Run the program with different workloads (varying process sizes and memory access patterns).
Analyze the memory utilization, page faults, and hit rate for different workloads.
Discuss the reasons for page faults and their impact on performance.
Deliverables:

C code with clear comments and documentation.
A report explaining the design, implementation, analysis, and optimization of the memory management system.
Presentation of the project findings.